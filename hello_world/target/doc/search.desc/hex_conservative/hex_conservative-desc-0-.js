searchState.loadedDescShard("hex_conservative", 0, "Hex encoding and decoding.\nIterator over bytes which encodes the bytes and yields hex …\nPossible case of hex.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nConvenience alias for <code>HexToBytesIter&lt;HexDigitsIter&lt;&#39;a&gt;&gt;</code>.\nHex decoding error.\nHex decoding error.\nIterator yielding bytes decoded from an iterator of pairs …\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nProduce lower-case chars (<code>[0-9a-f]</code>).\nPurported hex string had odd length.\nPurported hex string had odd length.\nProduce upper-case chars (<code>[0-9A-F]</code>).\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nImplements a buffered encoder.\nHelpers for displaying bytes as hex strings.\nError code for the <code>hex-conservative</code> crate.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces an object from a hex string.\nConstructs a custom hex decoding iterator from another …\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>HexToBytesIter</code> from a string slice.\nConstructs a <code>BytesToHexIter</code> that will yield hex characters …\nHex encoding and decoding.\nRe-exports of the common crate traits.\nQuick and dirty macro for parsing hex in tests.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nFormats error.\nHex-encodes bytes into the provided buffer.\nReturns the written bytes as a hex <code>str</code>.\nResets the buffer to become empty.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if no more bytes can be written into the …\nCreates an empty <code>BufEncoder</code> that will encode bytes to hex …\nEncodes <code>byte</code> as hex and appends it to the buffer.\nEncodes <code>bytes</code> as hex and appends them to the buffer.\nEncodes as many <code>bytes</code> as fit into the buffer as hex and …\nHow many bytes can be written to this buffer.\nThe type providing <code>fmt::Display</code> implementation.\nDisplays byte array as hex.\nDisplays byte slice as hex.\nExtension trait for types that can be displayed as hex.\nGiven a <code>T:</code> <code>fmt::Write</code>, <code>HexWriter</code> implements <code>std::io::Write</code> …\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHints how much bytes to reserve when creating a <code>String</code>.\nAdds <code>core::fmt</code> trait implementations to type <code>$ty</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>HexWriter</code> returning the inner <code>T</code>.\nCreates a <code>HexWriter</code> that writes the source bytes to <code>dest</code> …\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.\nErrors\nHex decoding error.\nHex decoding error.\nNon-hexadecimal character.\nNon-hexadecimal character.\nInvalid hex character.\nTried to parse fixed-length hash from a string with the …\nTried to parse fixed-length hash from a string with the …\nPurported hex string had odd length.\nPurported hex string had odd length.\nThe expected length.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe invalid length.\nReturns the invalid character byte.\nReturns the odd length of the input string.\nReturns the position of the invalid character byte.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nProduces an object from a hex string.\nThe type providing <code>fmt::Display</code> implementation.\nExtension trait for types that can be displayed as hex.\nError type returned while parsing hex string.\nTrait for objects that can be deserialized from hex …\nAppends hex-encoded content to an existing <code>String</code>.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nProduces an object from a hex string.\nHints how much bytes to reserve when creating a <code>String</code>.\nCreate a hex-encoded string.\nCreate a lower-hex-encoded string.\nCreate an upper-hex-encoded string.")