searchState.loadedDescShard("secp256k1", 0, "Rust bindings for Pieter Wuille’s secp256k1 library, …\nRepresents the set of all capabilities.\nRepresents the set of all capabilities with a user …\nA trait for all kinds of contexts that lets you define the …\nA constant description of the context.\nAn ECDSA error\nEven parity.\nFlags for the ffi.\nSignature failed verification\nBadly sized message (“messages” are actually …\nError returned when conversion from an integer to <code>Parity</code> …\nThe only valid parity values are 0 or 1.\nBad public key.\nBad set of public keys.\nBad recovery id.\nBad secret key.\nBad shared secret.\nBad signature.\nTried to add/multiply by an invalid tweak.\nOpaque data structure that holds a keypair consisting of a …\nA (hashed) message input to an ECDSA signature.\nDidn’t pass enough memory to context creation with …\nThe number 1 encoded as a secret key.\nOdd parity.\nRepresents the parity passed between FFI function calls.\nTrait marking that a particular context object internally …\nA Secp256k1 public key, used for verification of …\nA Secp256k1 public key, used for verification of …\nThe secp256k1 engine, used to execute all signature …\nSecret 256-bit key used as <code>x</code> in an ECDSA signature.\nSecret 256-bit key used as <code>x</code> in an ECDSA signature.\nRepresents the set of capabilities needed for signing.\nRepresents the set of capabilities needed for signing with …\nbackwards compatible re-export of ecdsa signatures\nMarker trait for indicating that an instance of <code>Secp256k1</code> …\nTrait describing something that promises to be a 32-byte …\nMarker trait for indicating that an instance of <code>Secp256k1</code> …\nRepresents the set of capabilities needed for verification.\nRepresents the set of capabilities needed for verification …\nAn x-only public key, used for verification of Schnorr …\nAdds one secret key to another, modulo the curve order.\nAdds <code>other * G</code> to <code>self</code> in place.\nTweaks a <code>PublicKey</code> by adding <code>tweak * G</code> modulo the curve …\nTweaks a <code>SecretKey</code> by adding <code>tweak</code> modulo the curve order.\nTweaks an <code>XOnlyPublicKey</code> by adding the generator …\nTweaks a keypair by first converting the public key to an …\nConverts the object to a mutable raw pointer for FFI …\nConverts the object to a mutable raw pointer for FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw mutable pointer suitable for use with FFI …\nConverts the object to a raw pointer for FFI interfacing\nConverts the object to a raw pointer for FFI interfacing\nObtains a raw const pointer suitable for use with FFI …\nObtains a raw const pointer suitable for use with FFI …\nObtains a raw const pointer suitable for use with FFI …\nGets a reference to the underlying array\nGets a reference to the underlying array\nAdds a second key to this one, returning the sum.\nAdds the keys in the provided slice together, returning …\nConstants related to the API and the underlying curve.\nGetter for the raw pointer to the underlying secp256k1 …\nA function to deallocate the memory when the context is …\nFormats the explicit byte value of the secret key kept …\nFormats the explicit byte value of the secret key kept …\nSupport for shared secret computations.\nStructs and functionality related to the ECDSA signature …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a 32-byte hash directly to a message without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Parity</code> from a signed integer.\nCreates a new secret key using data from BIP-340 <code>KeyPair</code>.\nCreates a new compressed public key using data from …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for <code>keypair</code>.\nCreate a context from a raw context.\nCreate a context from a raw context.\nCreate a context from a raw context.\nCreates a <code>KeyPair</code> directly from a secret key slice.\nCreates a <code>KeyPair</code> directly from a secret key string.\nCreates a new public key from a <code>SecretKey</code>.\nCreates a <code>KeyPair</code> directly from a Secp256k1 secret key.\nConverts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key.\n<strong>If you just want to sign an arbitrary message use </strong>…\nCreates a public key directly from a slice.\nCreates a Schnorr public key directly from a slice.\nConstructs a <code>Parity</code> from a byte.\nCreates a <code>PublicKey</code> using the key material from <code>pk</code> …\nLets you create a context in a generic manner …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the object into a 32-byte array\nReturns whether the object as an array is empty\nReturns whether the object as an array is empty\nReturns the <code>KeyPair</code> for this <code>SecretKey</code>.\nReturns the length of the object as an array\nReturns the length of the object as an array\nMultiplies one secret key by another, modulo the curve …\nMuliplies the public key in place by the scalar <code>other</code>.\nTweaks a <code>SecretKey</code> by multiplying by <code>tweak</code> modulo the …\nTweaks a <code>PublicKey</code> by multiplying by <code>tweak</code> modulo the …\nNegates the secret key.\nNegates the public key.\nNegates the secret key.\nNegates the public key in place.\nCreates a new Secp256k1 context with all capabilities.\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nReturns the required memory for a preallocated context …\nUses the ffi <code>secp256k1_context_preallocated_size</code> to check …\nLets you create a context with a preallocated buffer in a …\nCreates a new Secp256k1 context with all capabilities\nCreates a new Secp256k1 context that can only be used for …\nCreates a new Secp256k1 context that can only be used for …\nReturns the <code>PublicKey</code> for this <code>SecretKey</code>.\nReturns the <code>PublicKey</code> for this <code>KeyPair</code>.\nReturns the <code>PublicKey</code> for this <code>XOnlyPublicKey</code>.\nProvides <code>Scalar</code> and related types.\nschnorrsig\nSchnorr Signature related methods.\nCreate a schnorr signature without using any auxiliary …\nCreate a Schnorr signature using the given auxiliary …\nVerify a Schnorr signature.\nReturns the secret key as a byte value.\nReturns the secret bytes for this key pair.\nReturns the <code>SecretKey</code> for this <code>KeyPair</code>.\n(Re)randomizes the Secp256k1 context for extra sidechannel …\nSerializes the key as a byte-encoded pair of values. In …\nSerializes the key as a byte-encoded x coordinate value …\nSerializes the key as a byte-encoded pair of values, in …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code> and …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nConstructs a signature for <code>msg</code> using the secret key <code>sk</code>, …\nCreate a schnorr signature without using any auxiliary …\nCreate a Schnorr signature using the given auxiliary …\nCreates a new Secp256k1 context that can only be used for …\nConverts parity into an integer value.\nConverts parity into an integer (byte) value.\nTweaks a keypair by adding the given tweak to the secret …\nTweaks an x-only PublicKey by adding the generator …\nVerifies that a tweak produced by …\nCreates a new Secp256k1 context that can only be used for …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nChecks that <code>sig</code> is a valid ECDSA signature for <code>msg</code> using …\nVerify a Schnorr signature.\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nReturns the <code>XOnlyPublicKey</code> (and it’s <code>Parity</code>) for this …\nThe maximum size of a compact signature.\nThe order of the secp256k1 curve.\nThe Prime for the secp256k1 field element.\nThe X coordinate of the generator.\nThe Y coordinate of the generator.\nThe size of a key pair.\nThe maximum size of a signature.\nThe size (in bytes) of a message.\nThe size (in bytes) of a serialized public key.\nThe size of a Schnorr public key.\nThe size of a Schnorr signature.\nThe size of a Schnorr public key.\nThe size of a Schnorr signature.\nThe size (in bytes) of a secret key.\nThe size (in bytes) of an serialized uncompressed public …\nEnables two parties to create a shared secret without …\nFormats the explicit byte value of the shared secret kept …\nReturns the argument unchanged.\nCreates a shared secret from <code>bytes</code> array.\nCreates a shared secret from <code>bytes</code> slice.\nCalls <code>U::from(self)</code>.\nCreates a new shared secret from a pubkey and secret key.\nReturns the shared secret as a byte value.\nCreates a shared point from public key and secret key.\nAn ECDSA signature\nObtains a raw mutable pointer suitable for use with FFI …\nObtains a raw pointer suitable for use with FFI functions\nReturns the argument unchanged.\nConverts a 64-byte compact-encoded byte slice to a …\nConverts a DER-encoded byte slice to a signature\nConverts a “lax DER”-encoded byte slice to a …\nCalls <code>U::from(self)</code>.\nNormalizes a signature to a “low S” form. In ECDSA, …\nSerializes the signature in compact format\nSerializes the signature in DER format\nImplements <code>SerializedSignature</code> and related types.\nOwned iterator over the bytes of <code>SerializedSignature</code>\nA DER serialized Signature\nReturns the remaining bytes as a slice.\nGet the capacity of the underlying data buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a SerializedSignature from a Signature. (this DER …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the space is zero.\nGet the len of the used data.\nConvert the serialized signature into the Signature struct.\nMaximum valid value: <code>curve_order - 1</code>\nScalar representing <code>1</code>\nError returned when the value of scalar is invalid - …\nPositive 256-bit integer guaranteed to be less than the …\nScalar representing <code>0</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to deserialize from big endian bytes\nTries to deserialize from little endian bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerializes to big endian bytes\nSerializes to little endian bytes\nRepresents a Schnorr signature.\nConverts the object to a mutable raw pointer for FFI …\nConverts the object to a raw pointer for FFI interfacing\nGets a reference to the underlying array\nReturns the argument unchanged.\nCreates a Signature directly from a slice\nCalls <code>U::from(self)</code>.\nReturns whether the object as an array is empty\nReturns the length of the object as an array\nbackwards compatible re-export of keypair\nbackwards compatible re-export of xonly key\nbackwards compatible re-export of schnorr signatures")