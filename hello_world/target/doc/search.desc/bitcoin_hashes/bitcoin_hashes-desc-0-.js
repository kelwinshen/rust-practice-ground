searchState.loadedDescShard("bitcoin_hashes", 0, "Rust hashes library.\nLength of the hash’s internal block size, in bytes.\nThe byte array that represents the hash internally.\nFlag indicating whether user-visible serializations of …\nA hashing engine which bytes can be serialized into. It is …\nAttempted to create a hash from an invalid length slice.\nTrait describing hash digests which can be constructed by …\nTrait which applies to hashes of all types.\nHASH-160: Alias for the <code>hash160::Hash</code> hash type. Output of …\nA hashing engine which bytes can be serialized into.\nHMAC-based Extract-and-Expand Key Derivation Function …\nHKDF-HMAC-SHA-256: Type alias for the <code>Hkdf&lt;Sha256&gt;</code> type.\nHKDF-HMAC-SHA-512: Type alias for the <code>Hkdf&lt;Sha512&gt;</code> type.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nHMAC-SHA-256: Type alias for the <code>Hmac&lt;Sha256&gt;</code> type.\nHMAC-SHA-512: Type alias for the <code>Hmac&lt;Sha512&gt;</code> type.\nEnsures that a type is an array.\nLength of the hash, in bytes.\nThe length of the array.\nRIPEMD-160: Alias for the <code>ripemd160::Hash</code> hash type. …\nSHA-1: Alias for the <code>sha1::Hash</code> hash type. Output of the …\nSHA-256: Alias for the <code>sha256::Hash</code> hash type. Output of …\nDouble SHA-256: Alias for the <code>sha256d::Hash</code> hash type. …\nTagged SHA-256: Type alias for the <code>sha256t::Hash</code> hash type.\nSHA-384: Alias for the <code>sha384::Hash</code> hash type. Output of …\nSHA-512: Alias for the <code>sha512::Hash</code> hash type. Output of …\nSHA-512-256: Alias for the <code>sha512_256::Hash</code> hash type. …\nSipHash-2-4: Alias for the <code>siphash24::Hash</code> hash type. …\nReturns a reference to the underlying byte array.\nUseful comparison functions.\nConstructs a new engine.\nReturns the expected slice length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHASH160 (SHA256 then RIPEMD160) implementation.\nHashes all the byte slices retrieved from the iterator …\nCreates a new newtype around a <code>Hash</code> type.\nRe-export the <code>hex-conservative</code> crate.\nHMAC-based Extract-and-Expand Key Derivation Function …\nHash-based Message Authentication Code (HMAC).\nAdd data to the hash engine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid slice length.\nPublic macros.\nReturn the number of bytes already input into the engine.\nRIPEMD160 implementation.\nDoes an “empty” serde implementation for the …\nMacros for serde trait implementations, and supporting …\nSHA1 implementation.\nSHA256 implementation.\nSHA256d implementation (double SHA256).\nSHA256t implementation (tagged SHA256).\nMacro used to define a newtype tagged hash.\nMacro used to define a tag.\nSHA384 implementation.\nSHA512 implementation.\nSHA512_256 implementation.\nSipHash 2-4 implementation.\nReturns the underlying byte array.\nCompare two slices for equality in fixed time. Panics if …\nOutput of the Bitcoin HASH160 hash function. …\nEngine to compute HASH160 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new HASH160 hash engine.\nReturns the underlying byte array.\nHMAC-based Extract-and-Expand Key Derivation Function …\nSize of output exceeds maximum length allowed.\nExpand the key to generate output key material in okm.\nExpand the key to specified length.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a HKDF by performing the extract step.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underlying hash engines, used for the inner and …\nA special constructor giving direct access to the …\nConstructs a new keyed HMAC from <code>key</code>.\nOutput of the RIPEMD160 hash function.\nEngine to compute RIPEMD160 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA256 hash engine.\nReturns the underlying byte array.\nOutput of the SHA1 hash function.\nEngine to compute SHA1 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA1 hash engine.\nReturns the underlying byte array.\nOutput of the SHA256 hash function.\nEngine to compute SHA256 hash function.\nUnfinalized output of the SHA256 hash function.\n<code>Midstate</code> invariant violated (not a multiple of 64).\nReturns a reference to the underlying byte array.\nDeconstructs the <code>Midstate</code>, returning the underlying byte …\nReturns <code>true</code> if the midstate can be extracted from this …\nComputes hash from <code>bytes</code> in <code>const</code> context.\nConstructs a new engine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCreates a new <code>HashEngine</code> from a <code>Midstate</code>.\nCopies a byte slice into a hash object.\nHashes some bytes.\nIterate the sha256 algorithm to turn a sha256 hash into a …\nHashes all the byte slices retrieved from the iterator …\nCreates midstate for tagged hashes.\nComputes hash from <code>bytes</code> in <code>const</code> context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutputs the midstate of the hash engine.\nCreates a new SHA256 hash engine.\nConstruct a new <code>Midstate</code> from the <code>state</code> and the …\nReturns the underlying byte array.\nDeconstructs the <code>Midstate</code>, returning the underlying byte …\nOutput of the SHA256d hash function.\nEngine to compute SHA256d hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA256d hash engine.\nReturns the underlying byte array.\nOutput of the SHA256t hash function.\nTrait representing a tag that can be used as a context for …\nReturns a reference to the underlying byte array.\nReturns a hash engine that is pre-tagged and is ready to …\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nReturns the underlying byte array.\nOutput of the SHA384 hash function.\nEngine to compute SHA384 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA384 hash engine.\nReturns the underlying byte array.\nOutput of the SHA512 hash function.\nEngine to compute SHA512 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA512 hash engine.\nReturns the underlying byte array.\nOutput of the SHA512/256 hash function.\nEngine to compute SHA512/256 hash function.\nReturns a reference to the underlying byte array.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHashes all the byte slices retrieved from the iterator …\nCalls <code>U::from(self)</code>.\nCreates a new SHA512/256 hash engine.\nReturns the underlying byte array.\nOutput of the SipHash24 hash function.\nEngine to compute the SipHash24 hash function.\nInternal state of the <code>HashEngine</code>.\nReturns a reference to the underlying byte array.\nReturns the (little endian) 64-bit integer representation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash from the current state of a given engine.\nProduces a hash as <code>u64</code> from the current state of a given …\nCopies a byte slice into a hash object.\nCreates a hash from its (little endian) 64-bit integer …\nHashes the given data directly to u64 with an engine with …\nHashes the given data with an engine with the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the keys of this engine.\nReturns the underlying byte array.\nReturns the (little endian) 64-bit integer representation …\nCreates a new SipHash24 engine with keys.")