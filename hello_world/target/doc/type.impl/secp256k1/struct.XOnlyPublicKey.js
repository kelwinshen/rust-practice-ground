(function() {
    var type_impls = Object.fromEntries([["secp256k1",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CPtr-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1521-1530\">source</a><a href=\"#impl-CPtr-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"secp256k1_sys/trait.CPtr.html\" title=\"trait secp256k1_sys::CPtr\">CPtr</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1522\">source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section><section id=\"method.as_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1523-1525\">source</a><a href=\"#method.as_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_c_ptr\" class=\"fn\">as_c_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*const </a>Self::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section><section id=\"method.as_mut_c_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1527-1529\">source</a><a href=\"#method.as_mut_c_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"secp256k1_sys/trait.CPtr.html#tymethod.as_mut_c_ptr\" class=\"fn\">as_mut_c_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*mut </a>Self::<a class=\"associatedtype\" href=\"secp256k1_sys/trait.CPtr.html#associatedtype.Target\" title=\"type secp256k1_sys::CPtr::Target\">Target</a></h4></section></div></details>","CPtr","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Clone-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Debug-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1142-1146\">source</a><a href=\"#impl-Display-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1143-1145\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1540-1556\">source</a><a href=\"#impl-From%3CPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\">PublicKey</a>&gt; for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1541-1555\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(src: <a class=\"struct\" href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\">PublicKey</a>) -&gt; <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PublicKey>","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CXOnlyPublicKey%3E-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1533-1538\">source</a><a href=\"#impl-From%3CXOnlyPublicKey%3E-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a>&gt; for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"docblock\"><p>Creates a new Schnorr public key from a FFI x-only public key.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1535-1537\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pk: <a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<XOnlyPublicKey>","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1148-1159\">source</a><a href=\"#impl-FromStr-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1149\">source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1150-1158\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.83.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Hash-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/hash/mod.rs.html#235-237\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.83.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1132-1140\">source</a><a href=\"#impl-LowerHex-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1133-1139\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Ord-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#980-982\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1001-1003\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1027-1029\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-PartialEq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-PartialOrd-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1335\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1353\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1371\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#1389\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","secp256k1::schnorrsig::PublicKey"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1161-1366\">source</a><a href=\"#impl-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1164-1166\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*const </a><a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class=\"docblock\"><p>Obtains a raw const pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1170-1172\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"secp256k1_sys/struct.XOnlyPublicKey.html\" title=\"struct secp256k1_sys::XOnlyPublicKey\">XOnlyPublicKey</a></h4></section></summary><div class=\"docblock\"><p>Obtains a raw mutable pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_keypair\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1176-1191\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.from_keypair\" class=\"fn\">from_keypair</a>(keypair: &amp;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>) -&gt; (<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a> (and it’s <a href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\"><code>Parity</code></a>) for <code>keypair</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1200-1218\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a Schnorr public key directly from a slice.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <a href=\"secp256k1/enum.Error.html#variant.InvalidPublicKey\" title=\"variant secp256k1::Error::InvalidPublicKey\"><code>Error::InvalidPublicKey</code></a> if the length of the data slice is not 32 bytes or the\nslice does not represent a valid Secp256k1 point x coordinate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1222-1234\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.serialize\" class=\"fn\">serialize</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.array.html\">32</a>]</h4></section></summary><div class=\"docblock\"><p>Serializes the key as a byte-encoded x coordinate value (32 bytes).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tweak_add_assign\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1238-1246\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.tweak_add_assign\" class=\"fn\">tweak_add_assign</a>&lt;V: <a class=\"trait\" href=\"secp256k1/trait.Verification.html\" title=\"trait secp256k1::Verification\">Verification</a>&gt;(\n    &amp;mut self,\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;V&gt;,\n    tweak: &amp;<a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.23.0: Use add_tweak instead</span></div></span></summary><div class=\"docblock\"><p>Tweaks an x-only PublicKey by adding the generator multiplied with the given tweak to it.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_tweak\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1275-1306\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.add_tweak\" class=\"fn\">add_tweak</a>&lt;V: <a class=\"trait\" href=\"secp256k1/trait.Verification.html\" title=\"trait secp256k1::Verification\">Verification</a>&gt;(\n    self,\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;V&gt;,\n    tweak: &amp;<a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>), <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tweaks an <a href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a> by adding the generator multiplied with the given tweak to it.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>The newly tweaked key plus an opaque type representing the parity of the tweaked key, this\nshould be provided to <code>tweak_add_check</code> which can be used to verify a tweak more efficiently\nthan regenerating it and checking equality.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If the resulting key would be invalid.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::{Secp256k1, KeyPair, Scalar, XOnlyPublicKey};\n<span class=\"kw\">use </span>secp256k1::rand::{RngCore, thread_rng};\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>tweak = Scalar::random();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>key_pair = KeyPair::new(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;mut </span>thread_rng());\n<span class=\"kw\">let </span>(xonly, _parity) = key_pair.x_only_public_key();\n<span class=\"kw\">let </span>tweaked = xonly.add_tweak(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweak).expect(<span class=\"string\">\"Improbable to fail with a randomly generated tweak\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tweak_add_check\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1338-1357\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.tweak_add_check\" class=\"fn\">tweak_add_check</a>&lt;V: <a class=\"trait\" href=\"secp256k1/trait.Verification.html\" title=\"trait secp256k1::Verification\">Verification</a>&gt;(\n    &amp;self,\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;V&gt;,\n    tweaked_key: &amp;Self,\n    tweaked_parity: <a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>,\n    tweak: <a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Verifies that a tweak produced by <a href=\"secp256k1/struct.XOnlyPublicKey.html#method.tweak_add_assign\" title=\"method secp256k1::XOnlyPublicKey::tweak_add_assign\"><code>XOnlyPublicKey::tweak_add_assign</code></a> was computed correctly.</p>\n<p>Should be called on the original untweaked key. Takes the tweaked key and output parity from\n<a href=\"secp256k1/struct.XOnlyPublicKey.html#method.tweak_add_assign\" title=\"method secp256k1::XOnlyPublicKey::tweak_add_assign\"><code>XOnlyPublicKey::tweak_add_assign</code></a> as input.</p>\n<p>Currently this is not much more efficient than just recomputing the tweak and checking\nequality. However, in future this API will support batch verification, which is\nsignificantly faster, so it is wise to design protocols with this in mind.</p>\n<h5 id=\"returns-1\"><a class=\"doc-anchor\" href=\"#returns-1\">§</a>Returns</h5>\n<p>True if tweak and check is successful, false otherwise.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::{Secp256k1, KeyPair, Scalar};\n<span class=\"kw\">use </span>secp256k1::rand::{thread_rng, RngCore};\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>tweak = Scalar::random();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>key_pair = KeyPair::new(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;mut </span>thread_rng());\n<span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>public_key, <span class=\"kw\">_</span>) = key_pair.x_only_public_key();\n<span class=\"kw\">let </span>original = public_key;\n<span class=\"kw\">let </span>parity = public_key.tweak_add_assign(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweak).expect(<span class=\"string\">\"Improbable to fail with a randomly generated tweak\"</span>);\n<span class=\"macro\">assert!</span>(original.tweak_add_check(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>public_key, parity, tweak));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1363-1365\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.XOnlyPublicKey.html#tymethod.public_key\" class=\"fn\">public_key</a>(&amp;self, parity: <a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>) -&gt; <a class=\"struct\" href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\">PublicKey</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\"><code>PublicKey</code></a> for this <a href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a>.</p>\n<p>This is equivalent to using [<code>PublicKey::from_xonly_and_parity(self, parity)</code>].</p>\n</div></details></div></details>",0,"secp256k1::schnorrsig::PublicKey"],["<section id=\"impl-Copy-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Copy-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","Copy","secp256k1::schnorrsig::PublicKey"],["<section id=\"impl-Eq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-Eq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","Eq","secp256k1::schnorrsig::PublicKey"],["<section id=\"impl-StructuralPartialEq-for-XOnlyPublicKey\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1129\">source</a><a href=\"#impl-StructuralPartialEq-for-XOnlyPublicKey\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a></h3></section>","StructuralPartialEq","secp256k1::schnorrsig::PublicKey"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[45847]}